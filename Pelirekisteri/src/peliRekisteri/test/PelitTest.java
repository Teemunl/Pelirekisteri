package peliRekisteri.test;
// Generated by ComTest BEGIN
import peliRekisteri.*;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2020.04.23 16:40:45 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class PelitTest {



  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa64 
   * @throws SailoException when error
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testKorvaaTaiLisaa64() throws SailoException,CloneNotSupportedException {    // Pelit: 64
    Pelit pelit = new Pelit(); 
    Peli csgo1 = new Peli(), csgo = new Peli(); 
    csgo1.rekisteroi(); csgo.rekisteroi(); 
    assertEquals("From: Pelit line: 70", 0, pelit.getLkm()); 
    pelit.korvaaTaiLisaa(csgo1); assertEquals("From: Pelit line: 71", 1, pelit.getLkm()); 
    pelit.korvaaTaiLisaa(csgo); assertEquals("From: Pelit line: 72", 2, pelit.getLkm()); 
    Peli csgo3 = csgo1.clone(); 
    csgo3.aseta(3,"kkk"); 
    Iterator<Peli> it = pelit.iterator(); 
    assertEquals("From: Pelit line: 76", true, it.next() == csgo1); 
    pelit.korvaaTaiLisaa(csgo3); assertEquals("From: Pelit line: 77", 2, pelit.getLkm()); 
    it = pelit.iterator(); 
    Peli j0 = it.next(); 
    assertEquals("From: Pelit line: 80", csgo3, j0); 
    assertEquals("From: Pelit line: 81", true, j0 == csgo3); 
    assertEquals("From: Pelit line: 82", false, j0 == csgo1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista101 
   * @throws SailoException when error
   */
  @Test
  public void testPoista101() throws SailoException {    // Pelit: 101
    Pelit pelit = new Pelit(); 
    Peli csgo1 = new Peli(), csgo = new Peli(), csgo3 = new Peli(); 
    csgo1.rekisteroi(); csgo.rekisteroi(); csgo3.rekisteroi(); 
    int id1 = csgo1.getTunnusNro(); 
    pelit.lisaa(csgo1); pelit.lisaa(csgo); pelit.lisaa(csgo3); 
    assertEquals("From: Pelit line: 108", 1, pelit.poista(id1+1)); 
    assertEquals("From: Pelit line: 109", null, pelit.annaId(id1+1)); assertEquals("From: Pelit line: 109", 2, pelit.getLkm()); 
    assertEquals("From: Pelit line: 110", 1, pelit.poista(id1)); assertEquals("From: Pelit line: 110", 1, pelit.getLkm()); 
    assertEquals("From: Pelit line: 111", 0, pelit.poista(id1+3)); assertEquals("From: Pelit line: 111", 1, pelit.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPelitIterator248 
   * @throws SailoException when error
   */
  @Test
  public void testPelitIterator248() throws SailoException {    // Pelit: 248
    Pelit pelit = new Pelit(); 
    Peli csgo1 = new Peli(), csgo2 = new Peli(); 
    csgo1.rekisteroi(); csgo2.rekisteroi(); 
    pelit.lisaa(csgo1); 
    pelit.lisaa(csgo2); 
    pelit.lisaa(csgo1); 
    StringBuffer ids = new StringBuffer(30); 
    for (Peli peli:pelit) // Kokeillaan for-silmukan toimintaa
    ids.append(" "+peli.getTunnusNro()); 
    String tulos = " " + csgo1.getTunnusNro() + " " + csgo2.getTunnusNro() + " " + csgo1.getTunnusNro(); 
    assertEquals("From: Pelit line: 267", tulos, ids.toString()); 
    ids = new StringBuffer(30); 
    for (Iterator<Peli>  i=pelit.iterator(); i.hasNext(); ) { // ja iteraattorin toimintaa
    Peli peli = i.next(); 
    ids.append(" "+peli.getTunnusNro()); 
    }
    assertEquals("From: Pelit line: 275", tulos, ids.toString()); 
    Iterator<Peli>  i=pelit.iterator(); 
    assertEquals("From: Pelit line: 278", true, i.next() == csgo1); 
    assertEquals("From: Pelit line: 279", true, i.next() == csgo2); 
    assertEquals("From: Pelit line: 280", true, i.next() == csgo1); 
    try {
    i.next(); 
    fail("Pelit: 282 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testAnnaId360 
   * @throws SailoException when error
   */
  @Test
  public void testAnnaId360() throws SailoException {    // Pelit: 360
    Pelit pelit = new Pelit(); 
    Peli csgo1 = new Peli(), csgo2 = new Peli(), csgo3 = new Peli(); 
    csgo1.rekisteroi(); csgo2.rekisteroi(); csgo3.rekisteroi(); 
    int id1 = csgo1.getTunnusNro(); 
    pelit.lisaa(csgo1); pelit.lisaa(csgo2); pelit.lisaa(csgo3); 
    assertEquals("From: Pelit line: 367", true, pelit.annaId(id1  ) == csgo1); 
    assertEquals("From: Pelit line: 368", true, pelit.annaId(id1+1) == csgo2); 
    assertEquals("From: Pelit line: 369", true, pelit.annaId(id1+2) == csgo3); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsiId384 
   * @throws SailoException when error
   */
  @Test
  public void testEtsiId384() throws SailoException {    // Pelit: 384
    Pelit pelit = new Pelit(); 
    Peli csgo1 = new Peli(), csgo2 = new Peli(), csgo3 = new Peli(); 
    csgo1.rekisteroi(); csgo2.rekisteroi(); csgo3.rekisteroi(); 
    int id1 = csgo1.getTunnusNro(); 
    pelit.lisaa(csgo1); pelit.lisaa(csgo2); pelit.lisaa(csgo3); 
    assertEquals("From: Pelit line: 391", 1, pelit.etsiId(id1+1)); 
    assertEquals("From: Pelit line: 392", 2, pelit.etsiId(id1+2)); 
  } // Generated by ComTest END
}