package peliRekisteri.test;
// Generated by ComTest BEGIN
import static org.junit.Assert.*;
import org.junit.*;
import peliRekisteri.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2020.04.23 16:47:36 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class PeliTest {



  // Generated by ComTest BEGIN
  /** testGetNimi95 */
  @Test
  public void testGetNimi95() {    // Peli: 95
    Peli csgo = new Peli(); 
    csgo.vastaa_Csgo(); 
    { String _l_=csgo.getNimi(),_r_="Csgo .*"; if ( !_l_.matches(_r_) ) fail("From: Peli line: 98" + " does not match: ["+ _l_ + "] != [" + _r_ + "]");}; 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testRekisteroi232 */
  @Test
  public void testRekisteroi232() {    // Peli: 232
    Peli csgo1 = new Peli(); 
    assertEquals("From: Peli line: 234", 0, csgo1.getTunnusNro()); 
    csgo1.rekisteroi(); 
    Peli csgo2 = new Peli(); 
    csgo2.rekisteroi(); 
    int n1 = csgo1.getTunnusNro(); 
    int n2 = csgo2.getTunnusNro(); 
    assertEquals("From: Peli line: 240", n2-1, n1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testToString274 */
  @Test
  public void testToString274() {    // Peli: 274
    Peli peli = new Peli(); 
    peli.parse("   3  |  Csgo   | 2020"); 
    assertEquals("From: Peli line: 277", true, peli.toString().startsWith("3|Csgo|2020|"));  // on enemmäkin kuin 3 kenttää, siksi loppu |
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testParse299 */
  @Test
  public void testParse299() {    // Peli: 299
    Peli peli = new Peli(); 
    peli.parse("   3  |  Csgo  | Steam"); 
    assertEquals("From: Peli line: 302", 3, peli.getTunnusNro()); 
    assertEquals("From: Peli line: 303", true, peli.toString().startsWith("3|Csgo|Steam|")); 
    peli.rekisteroi(); 
    int n = peli.getTunnusNro(); 
    peli.parse(""+(n+20));  // Otetaan merkkijonosta vain tunnusnumero
    peli.rekisteroi();  // ja tarkistetaan että seuraavalla kertaa tulee yhtä isompi
    assertEquals("From: Peli line: 309", n+20+1, peli.getTunnusNro()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testClone324 
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testClone324() throws CloneNotSupportedException {    // Peli: 324
    Peli peli = new Peli(); 
    peli.parse("   3  |  Csgo   | 123"); 
    Peli kopio = peli.clone(); 
    assertEquals("From: Peli line: 329", peli.toString(), kopio.toString()); 
    peli.parse("   4  |  Csgo1   | 123"); 
    assertEquals("From: Peli line: 331", false, kopio.toString().equals(peli.toString())); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testEquals347 */
  @Test
  public void testEquals347() {    // Peli: 347
    Peli peli1 = new Peli(); 
    peli1.parse("   3  |  Csgo   | Steam"); 
    Peli peli2 = new Peli(); 
    peli2.parse("   3  |  Csgo   | Steam"); 
    Peli peli3 = new Peli(); 
    peli3.parse("   3  | Csgo   | Epic Games"); 
    assertEquals("From: Peli line: 355", true, peli1.equals(peli2)); 
    assertEquals("From: Peli line: 356", true, peli2.equals(peli1)); 
    assertEquals("From: Peli line: 357", false, peli1.equals(peli3)); 
    assertEquals("From: Peli line: 358", false, peli3.equals(peli2)); 
  } // Generated by ComTest END
}